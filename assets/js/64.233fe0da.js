(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{356:function(a,e,t){"use strict";t.r(e);var l=t(15),r=Object(l.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[a._v("#")]),a._v(" webpack")]),a._v(" "),t("ul",[t("li",[a._v("模块打包。可以将不同模块的文件打包整合在一起，并且保证它们之间的引用正确，执行有序。利用打包我们就可以在开发的时候根据我们自己的业务自由划分文件模块，\n保证项目结构的清晰和可读性。")]),a._v(" "),t("li",[a._v("编译兼容。在前端的“上古时期”，手写一堆浏览器兼容代码一直是令前端工程师头皮发麻的事情，而在今天这个问题被大大的弱化了，通过webpack的Loader机制，\n不仅仅可以帮助我们对代码做- polyfill，还可以编译转换诸如.less, .vue, .jsx这类在浏览器无法识别的格式文件，让我们在开发的时候可以使用新特性和新语法做开发，提高开发效率。")]),a._v(" "),t("li",[a._v("能力扩展。通过webpack的Plugin机制，我们在实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，\n工程效率以及打包输出的质量。")])]),a._v(" "),t("h2",{attrs:{id:"process-cwd-和-dirname-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-cwd-和-dirname-的区别"}},[a._v("#")]),a._v(" process.cwd() 和 __dirname 的区别")]),a._v(" "),t("ul",[t("li",[a._v("process.cwd()：当前 node 进程的路径，也就是整个项目的根路径")]),a._v(" "),t("li",[a._v("__dirname：当前执行文件所处文件夹的路径")])]),a._v(" "),t("h2",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[a._v("#")]),a._v(" 作用")]),a._v(" "),t("p",[a._v("本质上，webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。")]),a._v(" "),t("h2",{attrs:{id:"前端为何要进行打包构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端为何要进行打包构建"}},[a._v("#")]),a._v(" 前端为何要进行打包构建")]),a._v(" "),t("ul",[t("li",[a._v("体积更小（Tree-Shaking、压缩、合并），加载更快")]),a._v(" "),t("li",[a._v("编译高级语言或语法（TS，ES6+，模块化，scss）")]),a._v(" "),t("li",[a._v("兼容性和错误检查（Polyfill、postcss、eslint）")]),a._v(" "),t("li",[a._v("统一、高效的开发环境")]),a._v(" "),t("li",[a._v("统一的构建流程和产出标准")]),a._v(" "),t("li",[a._v("集成公司的构建规范（提测、上线等）")])]),a._v(" "),t("h2",{attrs:{id:"module、chunk、bundle的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#module、chunk、bundle的区别"}},[a._v("#")]),a._v(" module、chunk、bundle的区别")]),a._v(" "),t("ul",[t("li",[a._v("module，各个源码文件，webpack中一切皆模块")]),a._v(" "),t("li",[a._v("chunk，多模块合成的，如entry import() splitChunk")]),a._v(" "),t("li",[a._v("bundle，最终输出文件（每个chunk打包都会生成一个bundle）")])]),a._v(" "),t("h2",{attrs:{id:"loader和plugin的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader和plugin的区别"}},[a._v("#")]),a._v(" loader和plugin的区别")]),a._v(" "),t("ul",[t("li",[a._v("loader，模块转换器，如less -> css")]),a._v(" "),t("li",[a._v("plugin，扩展插件，如HtmlWebpackPlugin")])]),a._v(" "),t("h2",{attrs:{id:"常见的loader和plugin有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的loader和plugin有哪些"}},[a._v("#")]),a._v(" 常见的loader和plugin有哪些")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://webpack.docschina.org/loaders",target:"_blank",rel:"noopener noreferrer"}},[a._v("loader文档"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://webpack.docschina.org/plugins/",target:"_blank",rel:"noopener noreferrer"}},[a._v("plugin文档"),t("OutboundLink")],1)])]),a._v(" "),t("h2",{attrs:{id:"babel和webpack的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel和webpack的区别"}},[a._v("#")]),a._v(" babel和webpack的区别")]),a._v(" "),t("ul",[t("li",[a._v("babel，js新语法编译工具，不关心模块化。"),t("br"),a._v("\nBabel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，不转换新的 API。"),t("br"),a._v("\nPolyfill，Polyfill的准确意思为，用于实现浏览器并不支持的原生API的代码。")]),a._v(" "),t("li",[a._v("webpack，打包构建工具，是多个loader plugin的集合")])]),a._v(" "),t("h2",{attrs:{id:"如何产出一个lib"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何产出一个lib"}},[a._v("#")]),a._v(" 如何产出一个lib")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("output")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// lib 的文件名")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'lodash.js'")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 输出 lib 到 dist 目录下")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("path")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" distPath"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// lib 的全局变量名")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("library")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'lodash'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h2",{attrs:{id:"babel-polyfill-和-babel-runtime-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-polyfill-和-babel-runtime-的区别"}},[a._v("#")]),a._v(" babel-polyfill 和 babel-runtime 的区别")]),a._v(" "),t("ul",[t("li",[a._v("babel-polyfill会污染全局")]),a._v(" "),t("li",[a._v("babel-runtime不会污染全局")]),a._v(" "),t("li",[a._v("产出第三方 lib 要用 babel-runtime")])]),a._v(" "),t("h2",{attrs:{id:"webpack如何实现懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack如何实现懒加载"}},[a._v("#")]),a._v(" webpack如何实现懒加载")]),a._v(" "),t("ul",[t("li",[a._v("import()")]),a._v(" "),t("li",[a._v("结合Vue、React 异步组件")]),a._v(" "),t("li",[a._v("结合Vue-router、React-router 异步加载路由")])]),a._v(" "),t("h2",{attrs:{id:"为何-proxy-不能-被polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为何-proxy-不能-被polyfill"}},[a._v("#")]),a._v(" 为何 Proxy 不能 被Polyfill")]),a._v(" "),t("ul",[t("li",[a._v("Class 可以用 function 模拟")]),a._v(" "),t("li",[a._v("Promise 可以用 callback 模拟")]),a._v(" "),t("li",[a._v("Proxy 用 Object.defineProperty 无法模拟，因为defineProperty只支持对get和set方法的操作，而Proxy可以支持对in、has等方法的代理")])]),a._v(" "),t("h2",{attrs:{id:"webpack-优化构建速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化构建速度"}},[a._v("#")]),a._v(" webpack 优化构建速度")]),a._v(" "),t("ol",[t("li",[a._v("可用于生产环境:")])]),a._v(" "),t("ul",[t("li",[a._v("优化babel-loader； （减小打包模块入手）")]),a._v(" "),t("li",[a._v("IgnorePlugin； （减小打包模块入手，直接不引入）")]),a._v(" "),t("li",[a._v("noParse； （减小打包模块入手，引入,但不打包(不进行编译不进行模块化分析)）")]),a._v(" "),t("li",[a._v("happyPack；（减少打包时间入手）")]),a._v(" "),t("li",[a._v("ParalleUglifyPlugin; （减少打包时间入手）")])]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("不用于生产环境，用于开发环境：")])]),a._v(" "),t("ul",[t("li",[a._v("自动刷新；（提升开发体验）")]),a._v(" "),t("li",[a._v("热更新； （提升开发体验）")]),a._v(" "),t("li",[a._v("使用 webpack.DllPlugin 来预先编译（减小打包模块入手）")])])])}),[],!1,null,null,null);e.default=r.exports}}]);