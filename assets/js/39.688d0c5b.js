(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{317:function(t,a,s){"use strict";s.r(a);var e=s(15),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"主线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主线程"}},[t._v("#")]),t._v(" 主线程")]),t._v(" "),s("p",[t._v("JS只有一个线程，这个线程负责解释和执行JS代码，称其为主线程，在这个主线程上，所有的代码按照顺序执行。")]),t._v(" "),s("h3",{attrs:{id:"消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),s("p",[t._v("消息队列里面放的是一些待触发执行的方法，如点击事件，当触发之后，会被通知主线程去执行")]),t._v(" "),s("h3",{attrs:{id:"任务队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[t._v("#")]),t._v(" 任务队列")]),t._v(" "),s("p",[t._v("同步代码放到执行栈中执行，异步代码会先存放到任务队列中，执行栈代码先执行，异步代码在执行栈执行完后再执行。任务队列优先级高于消息队列")]),t._v(" "),s("h3",{attrs:{id:"延迟函数执行-settimeout、setinterval"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延迟函数执行-settimeout、setinterval"}},[t._v("#")]),t._v(" 延迟函数执行（setTimeout、setInterval）")]),t._v(" "),s("p",[t._v("等到执行栈清空的时候才会执行")]),t._v(" "),s("h3",{attrs:{id:"事件轮询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件轮询"}},[t._v("#")]),t._v(" 事件轮询")]),t._v(" "),s("p",[t._v("先执行同步的的事件，监听执行栈，并确定执行栈是否为空。如果执行栈是空的（等同步的事件执行完），它就检查消息队列（异步的事件），消息队列的事件就会放入执行栈去执行，（简单来说执行栈有就执行，没有就不执行）")]),t._v(" "),s("p",[s("strong",[t._v("Js不存在异步，可以通过事件轮询实现异步，是单线程的")])]),t._v(" "),s("p",[s("strong",[t._v("JS的宿主环境（浏览器，node）存在异步，是多线程的。")])]),t._v(" "),s("p",[s("strong",[t._v("优先级：同步 > 异步（任务队列 > 消息队列）> 延迟函数")])]),t._v(" "),s("p",[s("strong",[t._v("JavaScript中分为同步任务和异步任务，而异步任务中又分为宏任务和微任务两种，同一层级下，微任务永远比宏任务先执行")])]),t._v(" "),s("h3",{attrs:{id:"微任务-promise、async-await、process-nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务-promise、async-await、process-nexttick"}},[t._v("#")]),t._v(" 微任务（Promise、async/await、process.nextTick）")]),t._v(" "),s("p",[t._v("执行完当前主线程任务后就要马上执行的任务")]),t._v(" "),s("h3",{attrs:{id:"宏任务-settimeout、setinterval、ajax、事件绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-settimeout、setinterval、ajax、事件绑定"}},[t._v("#")]),t._v(" 宏任务（setTimeout、setInterval、Ajax、事件绑定）")]),t._v(" "),s("p",[t._v("可以理解是每次执行栈执行的代码就是一个宏任务")]),t._v(" "),s("ol",[s("li",[t._v("new Promise是一个构造函数，是同步任务")]),t._v(" "),s("li",[t._v("Promise.resolve().then 是微任务")]),t._v(" "),s("li",[t._v("async是同步任务")]),t._v(" "),s("li",[t._v("await方法返回的是一个Promise对象，后面相当于Promise then， 是微任务")]),t._v(" "),s("li",[t._v("定时器,加入下一次宏任务，是宏任务")])])])}),[],!1,null,null,null);a.default=r.exports}}]);