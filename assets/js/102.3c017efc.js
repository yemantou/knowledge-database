(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{398:function(t,a,s){"use strict";s.r(a);var r=s(15),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("异步对JavaScript来说真的很重要，最显而易见的原因就是性能。")]),t._v(" "),s("h3",{attrs:{id:"web-worker-任务并行-task-parallelism"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-worker-任务并行-task-parallelism"}},[t._v("#")]),t._v(" Web Worker（任务并行（task parallelism））")]),t._v(" "),s("p",[t._v("如果有一些处理密集型的任务要执行，但不希望它们都在主线程运行（这可能会减慢浏览器/UI），可能就会希望JavaScript能够以多线程的方式运行。"),s("br"),t._v("\n一部分运行在主UI线程下，另外一部分运行在另一个完全独立的线程中。这样会产生的问题有：")]),t._v(" "),s("ol",[s("li",[t._v("在独立的线程运行是否意味着它可以并行运行（在多CPU/核心的系统上），这样第二个线程的长时间运行就不会阻塞程序主线程。否则，相比于JavaScript中已有的异步并发，“虚拟多线程”并不会带来多少好处。")]),t._v(" "),s("li",[t._v("这两个部分能否访问共享的作用域和资源。如果可以的话，那你就将遇到多线程语言（Java、C++等）要面对的所有问题，比如需要合作式或抢占式的锁机制（mutex等）。这是相当多的额外工作，不要小看。")]),t._v(" "),s("li",[t._v("如果这两个部分能够共享作用域和资源的话，要知道它们将如何通信。"),s("br"),t._v("\n这是浏览器（即宿主环境）的功能，实际上和JavaScript语言本身几乎没什么关系。也就是说，JavaScript当前并没有任何支持多线程执行的功能。")])]),t._v(" "),s("p",[t._v("从JavaScript主程序（或另一个Worker）中，可以这样实例化一个Worker：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" w1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://uril.1/myworker.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这个URL应该指向一个JavaScript文件的位置（而不是一个HTML页面！），这个文件将被加载到一个Worker中。然后浏览器启动一个独立的线程，让这个文件在这个线程中作为独立的程序运行。"),s("br"),t._v("\n这种通过这样的URL创建的Worker称为专用Worker（Dedicated Worker）。还可以通过提供一个Blob URL（另外一个HTML5特性）创建一个在线Worker（Inline Worker)，本质上就是一个存储在单个（二进制）值中的在线文件。")]),t._v(" "),s("p",[t._v("Worker之间以及它们和主程序之间，不会共享任何作用域或资源，那会把所有多线程编程的噩梦带到前端领域，而是"),s("strong",[t._v("通过一个基本的事件消息机制相互联系")]),t._v("。"),s("br"),t._v("\nWorker w1对象是一个事件侦听者和触发者，可以通过订阅它来获得这个Worker发出的事件以及发送事件给这个Worker。")]),t._v(" "),s("p",[t._v('侦听事件（其实就是固定的"message"事件）：')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("w1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// evt.data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v('发送"message"事件给这个Worker：')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("w1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'something cool to say'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v('专用Worker和创建它的程序之间是一对一的关系。也就是说，"message"事件没有任何歧义需要消除，因为我们确定它只能来自这个一对一的关系：它要么来自这个Worker，要么来自主页面。')])]),t._v(" "),s("p",[t._v("要在创建Worker的程序中终止Worker，可以调用Worker对象（就像前面代码中的w1）上的terminate()。突然终止Worker线程不会给它任何机会完成它的工作或者清理任何资源。这就类似于通过关闭浏览器标签页来关闭页面。")]),t._v(" "),s("p",[t._v("在Worker内部是无法访问主程序的任何资源的。这意味着你不能访问它的任何全局变量，也不能访问页面的DOM或者其他资源。记住，这是一个完全独立的线程。")]),t._v(" "),s("p",[t._v("Web Worker通常应用于哪些方面呢？")]),t._v(" "),s("ol",[s("li",[t._v("处理密集型数学计算")]),t._v(" "),s("li",[t._v("大数据集排序")]),t._v(" "),s("li",[t._v("数据处理（压缩、音频分析、图像处理等）")]),t._v(" "),s("li",[t._v("高流量网络通信")])]),t._v(" "),s("h4",{attrs:{id:"数据传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据传递"}},[t._v("#")]),t._v(" 数据传递")]),t._v(" "),s("ul",[s("li",[t._v("在早期的Worker中："),s("br"),t._v("\n唯一的选择就是把所有数据序列化到一个字符串值中。除了双向序列化导致的速度损失之外，另一个主要的负面因素是数据需要被复制，这意味着两倍的内存使用（及其引起的垃圾收集方面的波动）。")]),t._v(" "),s("li",[t._v("有一些更好的选择："),s("br"),t._v("\n传递一个对象，可以使用结构化克隆算法（structured clone algorithm）把这个对象复制到另一边。这个算法甚至可以处理要复制的对象有循环引用的情况。就不用付出to-string和from-string的性能损失了，但是这种方案还是要使用双倍的内存。")]),t._v(" "),s("li",[t._v("还有一个更好的选择："),s("br"),t._v("\n使用Transferable对象，这时发生的是对象所有权的转移，数据本身并没有移动。"),s("br"),t._v("\n把对象传递到一个Worker中，在原来的位置上，它就变为空的或者是不可访问的，这样就消除了多线程编程作用域共享带来的混乱。所有权传递是可以双向进行的")])]),t._v(" "),s("h3",{attrs:{id:"simd-单指令多数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simd-单指令多数据"}},[t._v("#")]),t._v(" SIMD（单指令多数据）")]),t._v(" "),s("p",[t._v("一种数据并行（data parallelism）方式。")])])}),[],!1,null,null,null);a.default=e.exports}}]);