(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{387:function(t,a,s){"use strict";s.r(a);var n=s(15),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"continuation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continuation"}},[t._v("#")]),t._v(" continuation")]),t._v(" "),s("p",[t._v("回调函数包裹或者说封装了程序的延续（continuation）。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'..'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// B")]),t._v("\n")])])]),s("p",[t._v("// A和// B表示程序的前半部分（也就是现在的部分），而// C标识了程序的后半部分（也就是将来的部分）。前半部分立刻执行，然后是一段时间不确定的停顿。在未来的某个时刻，如果Ajax调用完成，程序就会从停下的位置继续执行后半部分。")]),t._v(" "),s("h3",{attrs:{id:"顺序的大脑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#顺序的大脑"}},[t._v("#")]),t._v(" 顺序的大脑")]),t._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("我们在假装并行执行多个任务时，实际上极有可能是在进行快速的上下文切换，比如与朋友或家人电话聊天的同时还试图打字。换句话说，我们是在两个或更多任务之间快速连续地来回切换，同时处理每个任务的微小片段。我们切换得如此之快，以至于对外界来说，我们就像是在并行地执行所有任务。")])]),t._v(" "),s("h3",{attrs:{id:"嵌套回调与链式回调"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#嵌套回调与链式回调"}},[t._v("#")]),t._v(" 嵌套回调与链式回调")]),t._v(" "),s("p",[t._v("回调方式最主要的缺陷：对于它们在代码中表达异步的方式，我们的大脑需要努力才能同步得上。"),s("br"),t._v("\n回调地狱：一个异步请求套着一个异步请求，一个异步请求依赖于另一个的执行结果，使用回调的方式相互嵌套。")]),t._v(" "),s("h3",{attrs:{id:"信任问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#信任问题"}},[t._v("#")]),t._v(" 信任问题")]),t._v(" "),s("p",[t._v("回调的信任问题：往第三方工具库（但不限于第三方工具库）传入回调函数时，控制权就交到了其手上（控制反转）。"),s("br"),t._v("\n如果你的代码中使用了回调，尤其是但也不限于使用第三方工具，而且你还没有应用某种逻辑来解决所有这些控制反转导致的信任问题，那你的代码现在已经有了bug，即使它们还没有给你造成损害。隐藏的bug也是bug。")])])}),[],!1,null,null,null);a.default=r.exports}}]);