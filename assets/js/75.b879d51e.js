(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{364:function(o,e,a){"use strict";a.r(e);var t=a(15),i=Object(t.a)({},(function(){var o=this,e=o.$createElement,a=o._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[a("h2",{attrs:{id:"客户端存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端存储"}},[o._v("#")]),o._v(" 客户端存储")]),o._v(" "),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[o._v("#")]),o._v(" cookie")]),o._v(" "),a("p",[o._v("HTTP cookie通常也叫作cookie，最初用于在客户端存储会话信息。这个规范要求服务器在响应HTTP请求时，通过发送Set-Cookie HTTP头部包含会话信息。浏览器会存储这些会话信息，并在之后的每个请求中都会通过HTTP头部cookie再将它们发回服务器。")]),o._v(" "),a("h4",{attrs:{id:"限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限制"}},[o._v("#")]),o._v(" 限制")]),o._v(" "),a("ul",[a("li",[o._v("不超过300个cookie；")]),o._v(" "),a("li",[o._v("每个cookie不超过4096字节；")]),o._v(" "),a("li",[o._v("每个域不超过20个cookie；")]),o._v(" "),a("li",[o._v("每个域不超过81920字节。")])]),o._v(" "),a("h4",{attrs:{id:"cookie的构成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie的构成"}},[o._v("#")]),o._v(" cookie的构成")]),o._v(" "),a("p",[o._v("cookie在浏览器中是由以下参数构成的：")]),o._v(" "),a("ul",[a("li",[o._v("名称：唯一标识cookie的名称。cookie名不区分大小写，因此myCookie和MyCookie是同一个名称。不过，实践中最好将cookie名当成区分大小写来对待，因为一些服务器软件可能这样对待它们。cookie名必须经过URL编码。")]),o._v(" "),a("li",[o._v("值：存储在cookie里的字符串值。这个值必须经过URL编码。")]),o._v(" "),a("li",[o._v("域：cookie有效的域。发送到这个域的所有请求都会包含对应的cookie。这个值可能包含子域（如www.wrox.com），也可以不包含（如．wrox.com表示对wrox.com的所有子域都有效）。如果不明确设置，则默认为设置cookie的域。")]),o._v(" "),a("li",[o._v("路径：请求URL中包含这个路径才会把cookie发送到服务器。例如，可以指定cookie只能由http://www.wrox.com/books/访问，因此访问http://www.wrox.com/下的页面就不会发送cookie，即使请求的是同一个域。")]),o._v(" "),a("li",[o._v("过期时间：表示何时删除cookie的时间戳（即什么时间之后就不发送到服务器了）。默认情况下，浏览器会话结束后会删除所有cookie。不过，也可以设置删除cookie的时间。这个值是GMT格式（Wdy, DD-Mon-YYYY HH:MM: SS GMT），用于指定删除cookie的具体时间。这样即使关闭浏览器cookie也会保留在用户机器上。把过期时间设置为过去的时间会立即删除cookie。")]),o._v(" "),a("li",[o._v("安全标志：设置之后，只在使用SSL安全连接的情况下才会把cookie发送到服务器。例如，请求https://www.wrox.com会发送cookie，而请求http://www.wrox.com则不会。")])]),o._v(" "),a("h4",{attrs:{id:"javascript中的cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript中的cookie"}},[o._v("#")]),o._v(" JavaScript中的cookie")]),o._v(" "),a("p",[o._v("在JavaScript中处理cookie比较麻烦，因为接口过于简单，只有BOM的document.cookie属性。根据用法不同，该属性的表现迥异。要使用该属性获取值时，document.cookie返回包含页面中所有有效cookie的字符串（根据域、路径、过期时间和安全设置），以分号分隔。"),a("strong",[o._v("所有名和值都是URL编码的，因此必须使用decodeURIComponent()解码。")])]),o._v(" "),a("p",[o._v("设置cookie最好使用encodeURIComponent()对名称和值进行编码。")]),o._v(" "),a("h4",{attrs:{id:"使用cookie的注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用cookie的注意事项"}},[o._v("#")]),o._v(" 使用cookie的注意事项")]),o._v(" "),a("p",[o._v("还有一种叫作HTTP-only的cookie。HTTP-only可以在浏览器设置，也可以在服务器设置，但只能在服务器上读取，这是因为JavaScript无法取得这种cookie的值。"),a("br"),o._v("\n因为所有cookie都会作为请求头部由浏览器发送给服务器，所以在cookie中保存大量信息可能会影响特定域浏览器请求的性能。"),a("strong",[o._v("保存的cookie越大，请求完成的时间就越长。即使浏览器对cookie大小有限制，最好还是尽可能只通过cookie保存必要信息，以避免性能问题。")])]),o._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[o._v("注意")]),o._v(" "),a("p",[o._v("不要在cookie中存储重要或敏感的信息。cookie数据不是保存在安全的环境中，因此任何人都可能获得。应该避免把信用卡号或个人地址等信息保存在cookie中。")])]),o._v(" "),a("h3",{attrs:{id:"web-storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-storage"}},[o._v("#")]),o._v(" Web Storage")]),o._v(" "),a("p",[o._v("localStorage和sessionStorage。localStorage是永久存储机制，sessionStorage是跨会话的存储机制。")]),o._v(" "),a("h4",{attrs:{id:"sessionstorage对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage对象"}},[o._v("#")]),o._v(" sessionStorage对象")]),o._v(" "),a("p",[o._v("essionStorage对象只存储会话数据，这意味着数据只会存储到浏览器关闭（窗口关闭）。这跟浏览器关闭时会消失的会话cookie类似。存储在sessionStorage中的数据不受页面刷新影响，可以在浏览器崩溃并重启后恢复。（取决于浏览器，Firefox和WebKit支持，IE不支持。）")]),o._v(" "),a("h4",{attrs:{id:"localstorage对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage对象"}},[o._v("#")]),o._v(" localStorage对象")]),o._v(" "),a("p",[o._v("要访问同一个localStorage对象，页面必须来自同一个域（子域不可以）、在相同的端口上使用相同的协议。")]),o._v(" "),a("p",[o._v("存储在localStorage中的数据会保留到通过JavaScript删除或者用户清除浏览器缓存。localStorage数据不受页面刷新影响，也不会因关闭窗口、标签页或重新启动浏览器而丢失。")]),o._v(" "),a("h4",{attrs:{id:"限制-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限制-2"}},[o._v("#")]),o._v(" 限制")]),o._v(" "),a("p",[o._v("不同浏览器给localStorage和sessionStorage设置了不同的空间限制，但大多数会限制为每个源5MB。关于每种媒介的新配额限制信息表，可以参考web.dev网站上的文章“Storage for the Web”。")]),o._v(" "),a("h3",{attrs:{id:"indexeddb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb"}},[o._v("#")]),o._v(" IndexedDB")]),o._v(" "),a("p",[o._v("Indexed Database API简称IndexedDB，是浏览器中存储结构化数据的一个方案。IndexedDB用于代替目前已废弃的Web SQL Database API。IndexedDB背后的思想是创造一套API，方便JavaScript对象的存储和获取，同时也支持查询和搜索。")]),o._v(" "),a("p",[o._v("IndexedDB的设计几乎完全是异步的。为此，大多数操作以请求的形式执行，这些请求会异步执行，产生成功的结果或错误。绝大多数IndexedDB操作要求添加onerror和onsuccess事件处理程序来确定输出。")]),o._v(" "),a("h4",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[o._v("#")]),o._v(" 数据库")]),o._v(" "),a("p",[o._v("IndexedDB是类似于MySQL或Web SQL Database的数据库。与传统数据库最大的区别在于，IndexedDB使用对象存储而不是表格保存数据。IndexedDB数据库就是在一个公共命名空间下的一组对象存储，类似于NoSQL风格的实现。")])])}),[],!1,null,null,null);e.default=i.exports}}]);